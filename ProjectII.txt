#include <iostream>
#include <vector>
#include <string>
#include <list>
#include <map>
#include <deque>
#include <algorithm>
#include <iterator>

using namespace std;

void printLists(const list<int>& l1, const list<int>& l2)
{
	cout << "list1: ";
	copy(l1.begin(), l1.end(), ostream_iterator<int>(cout, " "));
	cout << endl << "list2: ";
	copy(l2.begin(), l2.end(), ostream_iterator<int>(cout, " "));
	cout << endl << endl;
}

int main()
{
	string next;
	char again = 'y';
	int choice = 0;
	cout << "Welcome to Pick a template!\n" << endl;

	do
	{
		cout << "Please Choose a Template from 1 through 4, or 5 to quit." << endl;
		cout << "1: Vector" << endl;
		cout << "2: List" << endl;
		cout << "3: Map" << endl;
		cout << "4: Deque" << endl;
		cin >> choice;

		if (choice == 1)
		{
			vector<int> vec;
			int i;
			cout << "You are using a vector.\nVectors are sequence containers representing arrays that can change in size." << endl;
			cout << endl;
			cout << "vector size = " << vec.size() << endl;

			for (i = 0; i < 5; i++){
				vec.push_back(i);
			}

			cout << "extended vector size = " << vec.size() << endl;

			for (i = 0; i < 5; i++){
				cout << "value of vec [" << i << "] = " << vec[i] << endl;
			}

			vector<int>::iterator v = vec.begin();
			while (v != vec.end()) {
				cout << "value of v = " << *v << endl;
				v++;
			}
			main();
		}
		else if (choice == 2)
		{
			list<int> list1, list2;
			cout << "You are using a List.\nLists are sequence containers that allow constant time insert and erase operations anywhere within the sequence, and iteration in both directions." << endl;
			cout << endl;
			for (int i = 0; i<6; ++i) {
				list1.push_back(i);
				list2.push_front(i);
			}
			printLists(list1, list2);

			list2.splice(find(list2.begin(), list2.end(),
				3),
				list1);
			printLists(list1, list2);

			list2.splice(list2.end(),
				list2,
				list2.begin());
			printLists(list1, list2);


			list2.sort();
			list1 = list2;
			list2.unique();
			printLists(list1, list2);

			list1.merge(list2);
			printLists(list1, list2);
			main();
		}
		else if (choice == 3)
		{
			typedef map<string, float> StringFloatMap;

			cout << "You are using a map.\nMaps are associative containers that store elements formed by a combination of a key value and a mapped value, following a specific order." << endl;
			cout << endl;
			StringFloatMap stocks;
			stocks["Microsoft"] = 500;
			stocks["Sony"] = 400;
			stocks["Nintendo"] = 300;


			StringFloatMap::iterator pos;
			for (pos = stocks.begin(); pos != stocks.end(); ++pos) {
				cout << "stock: " << pos->first << "\t"
					<< "price: " << pos->second << endl;
			}
			cout << endl;

			for (pos = stocks.begin(); pos != stocks.end(); ++pos) {
				pos->second *= 2;
			}

			for (pos = stocks.begin(); pos != stocks.end(); ++pos) {
				cout << "stock: " << pos->first << "\t"
					<< "price: " << pos->second << endl;
			}
			cout << endl;

			stocks["Sony"] = stocks["Sony"];
			stocks.erase("Sony");

			for (pos = stocks.begin(); pos != stocks.end(); ++pos) {
				cout << "stock: " << pos->first << "\t"
					<< "price: " << pos->second << endl;
			}
			cout << endl;
			main();
		}
		else if (choice == 4)
		{
			deque<string> coll;

			cout << "You are using a Deque.\nDeque is an irregular acronym of double-ended queue.\nDouble-ended queues are sequence containers with dynamic sizes that can be expanded or contracted on both ends (either its front or its back)." << endl;
			cout << endl;
			coll.assign(3, string("Hello."));
			coll.push_back("Hi there");
			coll.push_front("Oh hi.");

			copy(coll.begin(), coll.end(),
				ostream_iterator<string>(cout, "\n"));
			cout << endl;

			coll.pop_front();
			coll.pop_back();

			for (unsigned i = 1; i<coll.size(); ++i) {
				coll[i] = "another " + coll[i];
			}

			coll.resize(4, "resized Hello.");

			copy(coll.begin(), coll.end(),
				ostream_iterator<string>(cout, "\n"));
			main();
		}
		if (choice == 5)
		{
			exit(1);
		}
	} while (again == 'y' || again == 'Y');

	return again;
}
